package com.example.aci;import androidx.annotation.NonNull;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.app.AppCompatActivity;import androidx.fragment.app.DialogFragment;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;import android.app.DatePickerDialog;import android.app.Dialog;import android.content.Context;import android.content.SharedPreferences;import android.icu.util.Calendar;import android.os.Bundle;import android.os.Handler;import android.os.Looper;import android.os.Message;import android.print.PrintAttributes;import android.print.PrintDocumentAdapter;import android.print.PrintManager;import android.text.TextUtils;import android.view.LayoutInflater;import android.view.MenuItem;import android.view.MotionEvent;import android.view.View;import android.widget.Button;import android.widget.DatePicker;import android.widget.EditText;import android.widget.TextView;import android.widget.Toast;import com.google.android.material.appbar.MaterialToolbar;import com.google.android.material.bottomnavigation.BottomNavigationView;import com.google.android.material.dialog.MaterialAlertDialogBuilder;import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;import com.google.android.material.textfield.TextInputLayout;import org.w3c.dom.Text;import java.io.File;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Locale;import AppClasses.Items;import AppClasses.Orders;import AppClasses.OrdersDetails;import DataClassess.Database;import DataClassess.OrderDetailTable;import DataClassess.OrderDetailTableDao;import DataClassess.OrderMasterTable;import DataClassess.OrderMasterTableDao;public class HomeActivity extends AppCompatActivity implements BottomNavigationView        .OnItemSelectedListener,ItemsInterface,OrdersInterface{    private String user_name;    private TextView txt_username;    private TextView lbl_order_date;    private RecyclerView.LayoutManager orders_layoutManager;    private RecyclerView orders_recycler;    private SwipeRefreshLayout orders_swiperefresh;    private Orders_Adapter orders_adapter;    private MaterialAlertDialogBuilder New_Item_Dialog;    private AlertDialog Alert_New_Item_dialog;    private Button btn_add_new_orderdetail;    private Button btn_add_date;    private int cnst_success_get_max_order_id=1;    private int cnst_success_save_order_id=2;    private Database home_database;    private OrderMasterTableDao orderMasterTableDaoObj;    private OrderDetailTableDao orderDetailTableDaoObj;    private TextView lbl_order_number;    private MaterialAlertDialogBuilder New_Order_Dialog;    private AlertDialog Alert_New_Order_dialog;    private MaterialToolbar home_topAppBar;    private Orders g_order=new Orders();    private List<OrdersDetails> g_ordersDetailsList_model=new ArrayList<>();    private BottomNavigationView orders_BottomNavigationView;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_home);        txt_username=findViewById(R.id.txt_username);        lbl_order_date=findViewById(R.id.lbl_order_date);        orders_recycler=findViewById(R.id.orders_recycler);        orders_swiperefresh=findViewById(R.id.orders_swiperefresh);        btn_add_new_orderdetail=findViewById(R.id.btn_add_new_orderdetail);        btn_add_date=findViewById(R.id.btn_add_date);        home_topAppBar=findViewById(R.id.home_topAppBar);        lbl_order_number=findViewById(R.id.lbl_order_number);        orders_BottomNavigationView=findViewById(R.id.orders_BottomNavigationView);        //=======================================        orders_BottomNavigationView                .setOnItemSelectedListener(this);        home_database=Database.getDatabase(this);         orderMasterTableDaoObj=home_database.orderMasterTableDao();         orderDetailTableDaoObj=home_database.orderDetailTableDao();        //=======================================        user_name=getUsername(getApplicationContext());        txt_username.setText(user_name);        lbl_order_date.setText(getCurrentDate());        g_order.setOrder_date(getCurrentDate());        g_ordersDetailsList_model.clear();        btn_add_new_orderdetail.setOnClickListener(view -> {            String datevar=lbl_order_date.getText().toString().trim();            if(!datevar.equals("")) {                showNewOrderDialog();            }else{                Toast.makeText(this, "Please choose a date", Toast.LENGTH_SHORT).show();            }                }        );        btn_add_date.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                DialogFragment newFragment = new DatePickerFragment(lbl_order_date,g_order);                newFragment.show(HomeActivity.this.getSupportFragmentManager(), "datePicker");            }        });        new Thread(() -> {            String order_number=orderMasterTableDaoObj.getOrderMaxNumber();            Message msgobj=new Message();            msgobj.what=cnst_success_get_max_order_id;            msgobj.obj=order_number;            home_Handler.sendMessage(msgobj);        }).start();    }    private static String getCurrentDate() {        // Get the current date        Date currentDate = new Date();        // Format the date as "dd/MM/yyyy"        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");        return sdf.format(currentDate);    }    public static String getUsername(Context context) {        SharedPreferences preferences = context.getSharedPreferences("ACI_PREF",                Context.MODE_PRIVATE);        return preferences.getString("user_name", "");    }    public void showNewItemDialog(RecyclerView items_order_recycler,List<Items> items_order_list_datamodel) {        LayoutInflater inflater = this.getLayoutInflater();        View item_new = inflater.inflate(R.layout.item_order_dialog, null);  // this line        Button btn_save_new_item=item_new.findViewById(R.id.btn_save_new_item);        MaterialToolbar item_order_dialog_topAppBar=item_new.findViewById(R.id.item_order_dialog_topAppBar);        EditText txt_item_order_dialog_itemname=item_new.findViewById(R.id.txt_item_order_dialog_itemname);        EditText txt_item_order_dialog_qty=item_new.findViewById(R.id.txt_item_order_dialog_qty);        EditText txt_item_order_dialog_customer=item_new.findViewById(R.id.txt_item_order_dialog_customer);        TextInputLayout lbl_item_order_dialog_itemname=item_new.findViewById(R.id.lbl_item_order_dialog_itemname);        TextInputLayout lbl_item_order_dialog_qty=item_new.findViewById(R.id.lbl_item_order_dialog_qty);        //==============================recycler parts        final RecyclerView.LayoutManager[] items_order_layoutManager = new RecyclerView.LayoutManager[1];        SwipeRefreshLayout items_order_swiperefresh;        final Item_order_adapter[] items_order_adapter = new Item_order_adapter[1];        //============================================        btn_save_new_item.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Boolean validation=true;                 Items itemObj=new Items();                 itemObj.setItemName(txt_item_order_dialog_itemname.getText().toString());                 itemObj.setQty(txt_item_order_dialog_qty.getText().toString());                 itemObj.setCustomer(txt_item_order_dialog_customer.getText().toString());                 if(itemObj.getItemName().equals("")) {                     validation=false;                     lbl_item_order_dialog_itemname.setErrorEnabled(true);                     lbl_item_order_dialog_itemname.setError("Please enter an item");                 }else{                     lbl_item_order_dialog_itemname.setErrorEnabled(false);                 }                String qty_input = txt_item_order_dialog_qty.getText().toString().trim();                 if(qty_input.isEmpty()||!TextUtils.isDigitsOnly(qty_input)){                     validation=false;                     lbl_item_order_dialog_qty.setErrorEnabled(true);                     lbl_item_order_dialog_qty.setError("Wrong qty input");                 }else{                     lbl_item_order_dialog_qty.setErrorEnabled(false);                 }                 if(validation==true) {                     items_order_list_datamodel.add(itemObj);                     items_order_layoutManager[0] = new LinearLayoutManager(HomeActivity.this);                     items_order_adapter[0] = new Item_order_adapter(items_order_list_datamodel, HomeActivity.this);                     items_order_recycler.setLayoutManager(items_order_layoutManager[0]);                     items_order_recycler.setAdapter(items_order_adapter[0]);                     Alert_New_Item_dialog.hide();                 }            }        });        item_order_dialog_topAppBar.setNavigationOnClickListener(view -> {            Alert_New_Item_dialog.hide();        });        New_Item_Dialog=new MaterialAlertDialogBuilder(this,R.style.CustomAciAlertDialog);        New_Item_Dialog.setView(item_new);        Alert_New_Item_dialog = New_Item_Dialog.show();    }    private void showNewOrderDialog(){        LayoutInflater inflater = this.getLayoutInflater();        View order_view = inflater.inflate(R.layout.home_order_dialog, null);  // this line        ExtendedFloatingActionButton fab_add_new_item=order_view.findViewById(R.id.fab_add_new_item);        ExtendedFloatingActionButton fab_save_new_orderdetail=order_view.findViewById(R.id.fab_save_new_orderdetail);        EditText input_supplier=order_view.findViewById(R.id.input_supplier);        RecyclerView items_order_recycler=order_view.findViewById(R.id.items_order_recycler);        List<Items> items_order_list_datamodel = new ArrayList<>();        fab_add_new_item.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                showNewItemDialog(items_order_recycler,items_order_list_datamodel);            }        });        fab_save_new_orderdetail.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                List<OrdersDetails> ordersDetailsList=new ArrayList<>();                ordersDetailsList.clear();                for (int i = 0; i < items_order_recycler.getChildCount(); i++) {                    RecyclerView.ViewHolder holder = items_order_recycler.getChildViewHolder(items_order_recycler.getChildAt(i));                    TextView lbl_itemname = holder.itemView.findViewById(R.id.lbl_itemname);                    TextView lbl_qty = holder.itemView.findViewById(R.id.lbl_qty);                    TextView lbl_customer = holder.itemView.findViewById(R.id.lbl_customer);                    Items itemObj=new Items();                    OrdersDetails ordersDetailsObj=new OrdersDetails();                    ordersDetailsObj.setSupplier(input_supplier.getText().toString());                    itemObj.setCustomer(lbl_customer.getText().toString());                    itemObj.setQty(lbl_qty.getText().toString());                    itemObj.setItemName(lbl_itemname.getText().toString());                    ordersDetailsObj.setItems(itemObj);                    ordersDetailsList.add(ordersDetailsObj);                }                g_ordersDetailsList_model.addAll(ordersDetailsList);                //=======================================                orders_layoutManager = new LinearLayoutManager(HomeActivity.this);                orders_adapter = new Orders_Adapter(g_ordersDetailsList_model, HomeActivity.this);                orders_recycler.setLayoutManager(orders_layoutManager);                orders_recycler.setAdapter(orders_adapter);                //=======================================                Alert_New_Order_dialog.hide();            }        });        New_Order_Dialog=new MaterialAlertDialogBuilder(this,R.style.CustomAciAlertDialog);        New_Order_Dialog.setView(order_view);        Alert_New_Order_dialog = New_Order_Dialog.show();    }    Handler home_Handler = new Handler(Looper.getMainLooper(), message -> {        if(message.what==cnst_success_get_max_order_id){            String order_number=(String)message.obj;            String formattedNumber = String.format("%06d", Integer.parseInt(order_number));            lbl_order_number.setText(formattedNumber);            g_order.setOrderNumber(order_number);        }        if(message.what==cnst_success_save_order_id){            clearorder();        }        return true;    });    @Override    public void showNewItemDialog(RecyclerView items_order_recycler) {    }    private void saveorder(){        g_order.setOrdersDetailsList(g_ordersDetailsList_model);        OrderMasterTable orderMasterTableObj=new OrderMasterTable();        orderMasterTableObj.setOrder_number(g_order.getOrderNumber());        orderMasterTableObj.setOrder_date(lbl_order_date.getText().toString());        List<OrderDetailTable> orderDetailTableList=new ArrayList<>();        List<OrdersDetails> ordersDetailsList=g_order.getOrdersDetailsList();        for(OrdersDetails lstvar:ordersDetailsList){            OrderDetailTable orderDetailTableObj=new OrderDetailTable();            orderDetailTableObj.setOrder_number(g_order.getOrderNumber());            orderDetailTableObj.setSupplier(lstvar.getSupplier());            orderDetailTableObj.setItemname(lstvar.getItems().getItemName());            orderDetailTableObj.setQty(lstvar.getItems().getQty());            orderDetailTableObj.setCustomer(lstvar.getItems().getCustomer());            orderDetailTableList.add(orderDetailTableObj);        }        new Thread(() -> {            orderMasterTableDaoObj.insertOrderMaster(orderMasterTableObj);            orderDetailTableDaoObj.insertOrderDetailAll(orderDetailTableList);            home_Handler.sendEmptyMessage(cnst_success_save_order_id);        }).start();    }    private void clearorder(){        g_ordersDetailsList_model.clear();        orders_adapter.notifyDataSetChanged();    }    @Override    public boolean onNavigationItemSelected(@NonNull MenuItem item) {        switch (item.getItemId()) {            case R.id.orders_clear:                clearorder();                return true;            case R.id.orders_save:                try {                    saveorder();                }catch(Exception e){                    System.out.println(e.getMessage());                }                return true;            case R.id.orders_print:                try {                    g_order.setOrdersDetailsList(g_ordersDetailsList_model);                    PdfHelper pdfHelperObj=new PdfHelper(this,g_order);                    String pdf_path=pdfHelperObj.CreatePdfFile();                    File pdf_path_file=new File(pdf_path);                    if(pdf_path_file.exists()) {                        PrintManager printManager=(PrintManager) HomeActivity.this.getSystemService(Context.PRINT_SERVICE);                        try {                            PrintDocumentAdapter printAdapter = new PdfDocumentAdapter(HomeActivity.this, pdf_path);                            printManager.print("Document", printAdapter, new PrintAttributes.Builder().build());                        }                        catch (Exception e)                        {                            e.printStackTrace();                        }                    }                }catch(Exception e){                    System.out.println(e.getMessage());                }                return true;        }        return false;    }    public static class DatePickerFragment extends DialogFragment            implements DatePickerDialog.OnDateSetListener {        private TextView edttxt;        private Orders order_Obj;        DatePickerFragment(TextView edttxt,Orders order_Obj) {            this.edttxt = edttxt;            this.order_Obj = order_Obj;        }        @Override        public Dialog onCreateDialog(Bundle savedInstanceState) {            final Calendar c = Calendar.getInstance();            int year = c.get(Calendar.YEAR);            int month = c.get(Calendar.MONTH);            int day = c.get(Calendar.DAY_OF_MONTH);            DatePickerDialog dialog = new DatePickerDialog(getActivity(), this, year, month, day);            dialog.getDatePicker().setMaxDate(c.getTimeInMillis());            return dialog;        }        public void onDateSet(DatePicker view, int year, int month, int day) {            final Calendar myCalendar = Calendar.getInstance();            myCalendar.set(Calendar.YEAR, year);            myCalendar.set(Calendar.MONTH, month);            myCalendar.set(Calendar.DAY_OF_MONTH, day);            String myFormat = "dd/MM/yyyy"; //In which you need put here            SimpleDateFormat sdf = new SimpleDateFormat(myFormat, Locale.US);            edttxt.setText(sdf.format(myCalendar.getTime()));            order_Obj.setOrder_date(sdf.format(myCalendar.getTime()));        }    }}